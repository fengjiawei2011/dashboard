<!DOCTYPE html>
<html>
<head>
<title><%= title %></title>
<link rel='stylesheet' href='/stylesheets/style.css' />
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<link rel="stylesheet" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css">
<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
<script type="text/javascript" src="/js/jquery.flot.min.js"></script>
<script type="text/javascript" src="/js/jquery.flot.time.js"></script>
<script type="text/javascript" src="/js/jquery.flot.axislabels.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<style type="text/css">

.chart{
	margin-bottom: 40px;
	margin-left : 0px;
	width: 630px;
	height: 300px;
}
</style>
<script type="text/javascript">
	//console.log(typeof(Storage));
	var datasets =<%-datasets%>;
	var datasetsSearched = [];
	var gap = 3;
	var type = "month";
	var dateChangedFlag = false;
	//console.log(JSON.stringify(datasets));
	//console.log(datasets[0].matedata);
	function getOptions(alertName) {
		return {
			axisLabels : {
				show : true
			},
			xaxis :{
				mode : 'time',
				//timeformat : '%m/%d/%y',
				tickSize : [ gap, type ],
				// tickSize: 1,
				//tickLength : 0,
				axisLabel :alertName,
				axisLabelUseCanvas : true,
				axisLabelFontSizePixels : 12,
				axisLabelFontFamily : 'Verdana, Arial',
				axisLabelPadding : 10
			}, 
			series : {
				lines : {
					show : true,
					fill : false,
					fillColor : {
						colors : [ {
							opacity : 0.7
						}, {
							opacity : 0.1
						} ]
					},
					steps : false
				},
				points : {
					radius : 5,
					show : true
				}
			},
		    grid: {
		        hoverable: true,
		        borderWidth: 2,
		        mouseActiveRadius: 50,
		        //backgroundColor: { colors: ["#ffffff", "#EDF5FF"] },
		        axisMargin: 20,
		    }
		};
	}
	
	function parse2FlotDataset(alertId, alertData) {
		//console.log(JSON.stringify(alertData));
		var flotFormatDataset = [];
		for(var i = 0; i < alertData.length; i++){
			var time = new Date(alertData[i].alertTime).getTime();
			var temp = [time, alertData[i].alertValue];
			flotFormatDataset.push(temp);
		}
		return [ {
			label : alertId,
			data : flotFormatDataset,
			hoverable: true
		} ];
	}

	function drawChart(alertId, dataset, alertName){
		var $alertId = $("#"+alertId);
		if($alertId.html() == '' || $alertId.html() == null ){
			//console.log("null");
			$('#chartsContainer').append("<div class='col-md-6 chart' id="+alertId+" data-toggle='modal' data-target='#myModal1'></div>");	
		}			
		$.plot($("#" + alertId), dataset, getOptions(alertName));
		
	}
	
	function drawAllCharts(datasets){
		//$('#chartsContainer').html('');
		for(var i in datasets){
			//if(datasets[i].dataset.length !== 0)
			var alertId = datasets[i].alertId;
			var alertDataset = parse2FlotDataset(alertId,datasets[i].alertData);
			var alertName = datasets[i].matedata.alertName
			drawChart(alertId, alertDataset, alertName);
		}
	}
	
	
	//get new dataset by filtering date
	function searchDatasetByDate(from , to){
		var newDatasets = [];
		
		for(var i in datasets){
			var dataset = datasets[i].alertData;
			var newDataset = {"alertId":datasets[i].alertId , "alertData":[], matedata: datasets[i].matedata};
			for(var j in dataset){
				if(from === ''){
					if( new Date(dataset[j].alertTime).getTime() <= to){	
						newDataset.alertData.push(dataset[j]);
					}
				}else if(to === ''){
					if(new Date(dataset[j].alertTime).getTime() >= from){		
						newDataset.alertData.push(dataset[j]);
					}
				}else{
					if(new Date(dataset[j].alertTime).getTime() >= from && new Date(dataset[j].alertTime).getTime() <= to){		
						newDataset.alertData.push(dataset[j]);
					}
				}
			}
			newDatasets.push(newDataset);
		}
		console.log(JSON.stringify(newDatasets));
		return newDatasets;
	}
	
	function getSql(id){
		for(var i in datasets){
			if(datasets[i].alertId === id)
				return datasets[i].matedata.sql;
			//alert("no alert id found !");
		}
	}
	
	function init(){
		$('#gap').val(gap);
		$('#type').val(type);
		$('.calendar').datepicker();
		$('#from').change(function(){
			dateChangedFlag = true;
			//console.log($('#from').val());
			
		});
		
		$('#to').change(function(){
			dateChangedFlag = true;
			//console.log($('#to').val());	
		});
	}
	
	function initMemory(){
		dateChangedFlag = false;
	}
	
	/*
	function searchDataset(alertId){
		for(var i in datasets){
			if(datasets[i].alertId == alertId) return datasets[i].dataset;
		}
	}
	
     //return flot format datasets
	function parse2FlotDatasetFormat(alertData){
		var datasets = {};
		var dataset = alertData.alertData; 
		var flotFormatDataset = [];
		for(var i = 0; i < dataset.length; i++){
			var time = new Date(dataset[i].alertTime).getTime();
			var temp = [time, dataset[i].alertValue];
			flotFormatDataset.push(temp);
		}
		datasets['alertId'] = alertData.alertId;
		datasets['dataset'] = flotFormatDataset;
		datasets['matedata'] = alertData.matedata;
		return datasets;
	}

	*/
	
	function getTo(){
		return new Date($('#to').val()).getTime()
	}
	
	function getFrom(){
		return new Date($('#from').val()).getTime();
	}
	
	function setType(t){
		type = t ;
	}
	
	function setGap(g){
		gap = g;
	}
	
	
	$(function(){
		init();
		drawAllCharts(datasets);

		$('#gap').change(function(){		
			setGap($('#gap').val());
			//console.log(JSON.stringify(getOptions()));
			
		});
		
		$('.chart1').click(function(){
			var id = $(this).attr('id');
			var sql = getSql(id);
			$('.modal-body').html(sql);
		});
		
		$('#type').change(function(){
			setType($('#type').val());
			//console.log(JSON.stringify(getOptions()));
		});
		
		$('#filter button').click(function(){
			//console.log(dateToChangedFlag + " -  " + dateFromChangedFlag)
			if( dateChangedFlag){
				var fromTime =$('#from').val();
				var toTime = $('#to').val(); 
				if(fromTime == '' || fromTime == null){
					datasetsSearched = searchDatasetByDate('',new Date(toTime).getTime());
				}else if(toTime == '' || toTime == null){
					datasetsSearched = searchDatasetByDate(new Date(fromTime).getTime(),'');
				}else{
					datasetsSearched = searchDatasetByDate(new Date(fromTime).getTime(),new Date(toTime).getTime());
				}
				
				console.log("search");
				
				drawAllCharts(datasetsSearched);
			}else{
				if(datasetsSearched.length == 0){
					console.log("draw all");
					drawAllCharts(datasets);
				}else{
					console.log("draw searched");
					drawAllCharts(datasetsSearched);
				}
				
			}		
			initMemory();	
		});
	
	});
</script>
</head>
<body>
	
	<div style="margin-left: auto;margin-right: auto; width: 100%">
		<div id="filter" style="margin-left: auto;margin-right: auto; margin-bottom:30px; width: 80%">
			Gap :<select id="gap">
				<option value="1">1</option>
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
				<option value="7">7</option>
			</select>
			
			Type : <select id="type">
				<option>day</option>
				<option>month</option>
				<option>year</option>
			</select>
			
			<span>from : <input type='text' id='from' class='calendar' /></span>
			<span>To   :<input type='text' id='to' class='calendar' /></span>	
			
			<button>go</button>
		</div>
		<div id="chartsContainer" class="row"></div>
	</div>

	 <div class="modal fade" id="myModal" tabindex="-1" role="dialog"
		aria-labelledby="myModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal"
						aria-hidden="true">&times;</button>
					<h4 class="modal-title" id="myModalLabel">Query Information</h4>
				</div>
				<div class="modal-body">
				 	
				</div>
				<div class="modal-footer">
					<!-- <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
					<button type="button" class="btn btn-primary">Save changes</button> -->
				</div>
		   	</div>
		</div>
	</div> 
</body>
</html>